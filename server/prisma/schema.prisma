// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  plan             String    @default("free") // "free" | "pro" | "enterprise"
  stripeCustomerId String?   @unique
  stripeSubId      String?   @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  apiKeys          ApiKey[]
}

model TokenLookup {
  id        Int      @id @default(autoincrement())
  token     String
  score     Int
  risk      String
  outlook   String
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([token, createdAt])
}

model AgentRun {
  id          Int      @id @default(autoincrement())
  token       String
  agentType   String   // "sentiment" | "valuation" | "risk"
  inputsJSON  Json
  outputJSON  Json
  score       Float?
  confidence  Float?
  createdAt   DateTime @default(now())

  @@index([token, createdAt])
  @@index([agentType, createdAt])
}

model ConsensusRun {
  id           Int      @id @default(autoincrement())
  token        String
  decision     String   // "BUY" | "HOLD" | "SELL"
  confidence   Float
  rationaleJSON Json
  createdAt    DateTime @default(now())

  @@index([token, createdAt])
}

model BacktestRun {
  id           Int      @id @default(autoincrement())
  windowDays   Int
  universeSize Int
  pnl          Float
  sharpe       Float
  maxDrawdown  Float
  detailsJSON  Json
  createdAt    DateTime @default(now())
}

model ApiKey {
  id             Int       @id @default(autoincrement())
  name           String
  keyHash        String    // hash of the API key
  plan           String    // keep for now; we'll sync from user.plan
  requestsPerMin Int       @default(60)
  requestsPerDay Int       @default(5000)
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // NEW: owner
  userId         Int?
  user           User?     @relation(fields: [userId], references: [id])

  usages         ApiUsage[]
  watchItems     WatchItem[]
  alerts         Alert[]
  alertEvents    AlertEvent[]
}

model ApiUsage {
  id         Int      @id @default(autoincrement())
  apiKeyId   Int
  endpoint   String
  status     Int
  createdAt  DateTime @default(now())

  apiKey     ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@index([apiKeyId, createdAt])
}

model SignalDaily {
  id          Int      @id @default(autoincrement())
  date        DateTime // UTC day (truncate to 00:00:00Z)
  token       String
  score       Int
  risk        String
  outlook     String
  decision    String   // BUY | HOLD | SELL
  confidence  Float
  priceUsd    Float
  createdAt   DateTime @default(now())

  @@unique([date, token])
  @@index([date, decision])
}

model WatchItem {
  id        Int      @id @default(autoincrement())
  apiKeyId  Int
  token     String
  createdAt DateTime @default(now())
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@unique([apiKeyId, token])
  @@index([apiKeyId, createdAt])
}

model Alert {
  id         Int      @id @default(autoincrement())
  apiKeyId   Int
  token      String
  type       String   // "consensus_flip" | "score_threshold" | "risk_change"
  condition  Json     // e.g. {"from": "SELL", "to": "BUY"} or {"scoreGte": 75}
  channel    String   // "webhook" | "email"
  target     String   // webhook URL or email address
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  apiKey     ApiKey   @relation(fields: [apiKeyId], references: [id])
  alertEvents AlertEvent[]

  @@index([apiKeyId, token])
}

model AlertEvent {
  id         Int      @id @default(autoincrement())
  alertId    Int
  apiKeyId   Int
  token      String
  payload    Json
  delivered  Boolean  @default(false)
  createdAt  DateTime @default(now())

  alert      Alert    @relation(fields: [alertId], references: [id])
  apiKey     ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@index([apiKeyId, createdAt])
}
