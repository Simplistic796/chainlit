generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TokenLookup {
  id        Int      @id @default(autoincrement())
  token     String
  score     Int
  risk      String
  outlook   String
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([token, createdAt])
}

model AgentRun {
  id         Int      @id @default(autoincrement())
  token      String
  agentType  String
  inputsJSON Json
  outputJSON Json
  score      Float?
  confidence Float?
  createdAt  DateTime @default(now())

  @@index([token, createdAt])
  @@index([agentType, createdAt])
}

model ConsensusRun {
  id            Int      @id @default(autoincrement())
  token         String
  decision      String
  confidence    Float
  rationaleJSON Json
  createdAt     DateTime @default(now())

  @@index([token, createdAt])
}

model BacktestRun {
  id           Int      @id @default(autoincrement())
  pnl          Float
  sharpe       Float
  maxDrawdown  Float
  detailsJSON  Json
  createdAt    DateTime @default(now())
  universeSize Int
  windowDays   Int
}

model ApiKey {
  id             Int          @id @default(autoincrement())
  name           String
  keyHash        String
  plan           String
  requestsPerMin Int          @default(60)
  requestsPerDay Int          @default(5000)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         Int?
  alerts         Alert[]
  alertEvents    AlertEvent[]
  user           User?        @relation(fields: [userId], references: [id])
  usages         ApiUsage[]
  watchItems     WatchItem[]
}

model ApiUsage {
  id        Int      @id @default(autoincrement())
  apiKeyId  Int
  endpoint  String
  status    Int
  createdAt DateTime @default(now())
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@index([apiKeyId, createdAt])
}

model SignalDaily {
  id         Int      @id @default(autoincrement())
  date       DateTime
  token      String
  score      Int
  risk       String
  outlook    String
  decision   String
  confidence Float
  priceUsd   Float
  createdAt  DateTime @default(now())

  @@unique([date, token])
  @@index([date, decision])
}

model WatchItem {
  id        Int      @id @default(autoincrement())
  apiKeyId  Int
  token     String
  createdAt DateTime @default(now())
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@unique([apiKeyId, token])
  @@index([apiKeyId, createdAt])
}

model Alert {
  id          Int          @id @default(autoincrement())
  apiKeyId    Int
  token       String
  type        String
  condition   Json
  channel     String
  target      String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  apiKey      ApiKey       @relation(fields: [apiKeyId], references: [id])
  alertEvents AlertEvent[]

  @@index([apiKeyId, token])
}

model AlertEvent {
  id        Int      @id @default(autoincrement())
  alertId   Int
  apiKeyId  Int
  token     String
  payload   Json
  delivered Boolean  @default(false)
  createdAt DateTime @default(now())
  alert     Alert    @relation(fields: [alertId], references: [id])
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@index([apiKeyId, createdAt])
}

model User {
  id               Int         @id @default(autoincrement())
  email            String      @unique
  plan             String      @default("free")
  stripeCustomerId String?     @unique
  stripeSubId      String?     @unique
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  apiKeys          ApiKey[]
  portfolios       Portfolio[]
}

model Portfolio {
  id        Int       @id @default(autoincrement())
  userId    Int
  name      String    @default("My Portfolio")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  holdings  Holding[]
  user      User      @relation(fields: [userId], references: [id])
}

model Holding {
  id          Int       @id @default(autoincrement())
  portfolioId Int
  token       String
  weight      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])

  @@unique([portfolioId, token])
}
